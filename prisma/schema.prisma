datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum StatusInvoice {
  DRAFT
  PAID
  PENDING
}

model Address {
  id            Int        @id @default(autoincrement())
  streetAddress String
  zipCode       String
  country       String
  city          String
  invoices      Invoice[]
  customers     Customer[]

  @@map("addresses")
}

model Invoice {
  id          String        @id @default(uuid())
  shortId     String        @unique
  userId      String
  description String
  paymentDate DateTime
  createdAt   DateTime      @default(now())
  addressId   Int
  customerId  String
  status      StatusInvoice @default(PENDING)

  items        InvoiceItems[]
  customer     Customer       @relation(fields: [customerId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  ownerAddress Address        @relation(fields: [addressId], references: [id])

  @@map("invoices")
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  email     String
  address   Address   @relation(fields: [addressId], references: [id])
  addressId Int
  Invoice   Invoice[]

  @@map("customers")
}

model InvoiceItems {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  quantity  Int
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?

  @@map("invoice_items")
}
